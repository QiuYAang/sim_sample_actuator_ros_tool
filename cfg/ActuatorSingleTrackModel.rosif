#!/usr/bin/env python
"""
Add your desired parameters here. All required headers will be generated from this.
!!!IMPORTANT this file must be executable !!!

Use one of these commands to add parameters to your parameter struct.

 def add(self, name, paramtype, description, level=0, edit_method='""', default=None, min=None, max=None, configurable=False, global_scope=False, constant=False):
        Adds parameters to your parameter struct.

        - If no default value is given, you need to specify one in your launch file
        - Global parameters, vectors, maps and constant params can not be configurable
        - Global parameters, vectors and maps can not have a default, min or max value

        :param self:
        :param name: The Name of you new parameter
        :param paramtype: The C++ type of this parameter. Can be any of ['std::string', 'int', 'bool', 'float', 'double'] or std::vector<...> or std::map<std::string, ...>
        :param description: Choose an informative documentation string for this parameter.
        :param level: (optional) Passed to dynamic_reconfigure
        :param edit_method: (optional) Passed to dynamic_reconfigure
        :param default: (optional) default value
        :param min: (optional)
        :param max: (optional)
        :param configurable: (optional) Should this parameter be dynamic configurable
        :param global_scope: (optional) If true, parameter is searched in global ('/') namespace instead of private ('~') ns
        :param constant: (optional) If this is true, the parameter will not be fetched from param server, but the default value is kept.
        :return: None

 def add_enum(self, name, description, entry_strings, default=None):
        Adds an enum to dynamic reconfigure
        :param name: Name of enum parameter
        :param description: Informative documentation string
        :param entry_strings: Enum entries, must be strings! (will be numbered with increasing value)
        :param default: Default value
        :return:

"""
from rosinterface_handler.interface_generator_catkin import *

gen = InterfaceGenerator()

# ROS-specific
gen.add("msg_queue_size", paramtype='int', description="Queusize for publisher", default=5, min=1)
gen.add_verbosity_param(configurable=True)
gen.add("cache_size", paramtype='int', description="Cache size", default=100)

# Your Params here
gen.add("vehicle_id", paramtype='int', description="Vehicle ID")
gen.add("steering_angle_in_topic", paramtype='std::string', description="Topicname for subscriber steering", default="default_steering_angle_in_topic")
gen.add("acceleration_in_topic", paramtype='std::string', description="Topicname for subscriber acceleration", default="default_acceleration_in_topic")
gen.add("objects_ground_truth_topic_with_ns", paramtype='std::string', description="Topicname for objects ground truth", default="default_objects_ground_truth_topic_with_ns")
gen.add("desired_motion_out_topic", paramtype='std::string', description="Topicname of desired motion", default="default_desired_motion_out_topic")
gen.add("delta_t", paramtype='double', description="Time step for motion calculation [s]", default=0.01)
gen.add("horizon_t", paramtype='double', description="Time horizon for motion calculation [s]", min=1, max=10, default=5.0, configurable=True)
gen.add("delay_steering", paramtype='double', description="Steering time delay [s]", min=0, max=5, default=0, configurable=True)
gen.add("delay_acceleration", paramtype='double', description="Acceleration time delay [s]", min=0, max=5, default=0, configurable=True)
gen.add("actuator_frequency", paramtype='double', description="Actuator frequency [Hz]", min=1, max=100, default=10, configurable=True)

# Vehicle model params
gen.add("m", paramtype='double', description="vehicle mass [kg]")
gen.add("i_sq", paramtype='double', description="square of effective radius for moment of intertia [m^2]: J = m i^2 = m i_sq")
gen.add("l_v", paramtype='double', description="length center of gravity - front axle [m]")
gen.add("l_h", paramtype='double', description="length center of gravity - rear axle [m]")
gen.add("c_v", paramtype='double', description="tire slip stiffness front [N/rad = N]")
gen.add("c_h", paramtype='double', description="tire slip stiffness rear [N/rad = N]")


# DO NOT TOUCH THIS LINE
#Syntax : Package, Node, Config Name(The final name will be ActuatorSingleTrackModelConfig)
exit(gen.generate("sim_sample_actuator_ros_tool", "actuator_single_track_model", "ActuatorSingleTrackModel"))
